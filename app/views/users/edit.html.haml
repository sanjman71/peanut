- title('Edit User')
- stylesheet('users', 'notes')
- javascript('users', 'notes')

-# init passwordable state based on user rpx flag; the state may change as we iterate through the user's email and phone numbers
- passwordable = !@user.rpx?

- form_for(@user, :url => url_for(:controller => 'users', :action => 'update', :role => @role, :subdomain => current_subdomain), :method => :post) do |f|
  
  .span-23.prepend-1.last.mat.padding-bottom-20
    %h3.padding-top-10{:style => 'font-size: 2.0em;'}== Edit Profile
    - if has_privilege?('update users', @user) and (@user == current_user)
      -# allow users to link their existing accounts
      %h4.bottom
        = link_to 'Link an existing account', add_rpx_user_path(@user), :class => 'admin', :id => 'add_rpx'
        %em{:style => 'padding-left: 5px;'}== e.g. yahoo, google, facebook, openid

  %hr.space
  .span-24.last
    = display_flash(:all)
  %hr.space

  -# show any user errors
  - unless @user.errors.blank?
    .span-16.notice
      = error_messages_for('user', :header_message => nil)

  -# name
  .span-20.last
    .span-4.text-align-right
      %h3{:style => 'font-size: 1.8em; padding-top: 15px;'}= label_tag "user_name", "Name:"
    .span-16.last
      = f.text_field :name, :class => 'text title', :style => "width: 300px;"

  -# email nested field
  - f.fields_for :email_addresses do |email_form|
    .span-20.last.email_address[email_form.object]{:class => email_form.object.new_record? ? 'hide' : ''}
      .span-4.text-align-right
        %h3{:style => 'font-size: 1.8em; padding-top: 15px;'}= label_tag "email_address", "Email:"
      .span-16.last
        -# not allowed to edit rpx user emails
        = email_form.text_field :address, :class => 'text title', :style => "width: 300px;", :id => 'email_address', :autocomplete => 'off', :disabled => !email_form.object.changeable?
        -# set passwordable state if email is changeable
        - passwordable = true if (!email_form.object.new_record? and email_form.object.changeable?)
        - markers = []
        - markers.push('Verified') if email_form.object.verified?
        - markers.push('Primary') if email_form.object == @primary_email_address
        - if has_privilege?('update users', @user) || has_privilege?('update users', current_company)
          - unless email_form.object.new_record? || email_form.object == @primary_email_address
            - markers.push(link_to('Make primary', user_email_promote_path(@user, email_form.object), :class => 'admin'))
          - if email_form.object.deletable? and (email_form.object != @primary_email_address)
            -# allow delete for non-primary emails
            - markers.push(link_to('Delete', user_email_delete_path(@user, email_form.object), :method => :delete, :class => 'admin'))

        - unless markers.empty?
          %span{:style => 'padding-left: 7px; font-weight: bold;'}= markers.join(", ")

  - if has_privilege?('update users', @user) || has_privilege?('update users', current_company)
    -# add email link
    .span-20.last#add_email
      .span-4.append-16.last.text-align-right
        %h4= link_to 'Add Email', '#', :class => 'admin', :id => 'add_email'

  -# phone nested field
  - f.fields_for :phone_numbers do |phone_form|
    .span-20.last.phone_number[phone_form.object]{:class => phone_form.object.new_record? ? 'hide' : ''}
      .span-20.last
        .span-4.text-align-right
          %h3{:style => 'font-size: 1.8em; margin-top: 15px;'}= label_tag "phone_address", "Phone:"
        .span-16.last
          = phone_form.text_field :address, :class => 'text title', :style => "width: 300px;", :id => 'phone_address', :autocomplete => 'off'
          -# set passwordable state if phone number is changeable
          - passwordable = true if (!phone_form.object.new_record? and phone_form.object.changeable?)
          - markers = []
          - markers.push('Verified') if phone_form.object.verified?
          - markers.push('Primary') if phone_form.object == @primary_phone_number
          - if has_privilege?('update users', @user) || has_privilege?('update users', current_company)
            - unless phone_form.object.new_record? || phone_form.object == @primary_phone_number
              - markers.push(link_to('Make primary', user_phone_promote_path(@user, phone_form.object), :class => 'admin'))
            - if phone_form.object.deletable? and (phone_form.object != @primary_phone_number)
              -# allow delete for non-primary phones
              - markers.push(link_to('Delete', user_phone_delete_path(@user, phone_form.object), :method => :delete, :class => 'admin'))
          - if has_privilege?('manage site') and phone_form.object.name == 'Mobile'
            -# allow site managers to send sms messages to mobile phones
            - markers.push(link_to('Send Sms', phone_form.object.address, :id => 'send_sms', :class => 'admin'))
          - unless markers.empty?
            %span{:style => 'padding-left: 7px; font-weight: bold;'}= markers.join(", ")
      .span-20.last
        .span-4.text-align-right
          %h3{:style => 'font-size: 1.8em; margin-top: 14px;'}= label_tag "phone_name", "Phone Name:"
        .span-16.last
          = phone_form.select(:name, options_for_select(PhoneNumber.names, phone_form.object.name), {:include_blank => true}, {:style => 'margin-top: 10px; font-size: 1.8em;', :class => 'select big', :id => 'phone_name'})

  - if has_privilege?('update users', @user) || has_privilege?('update users', current_company)
    -# add phone link
    .span-20.last#add_phone
      .span-4.append-16.last.text-align-right
        %h4= link_to 'Add Phone', '#', :class => 'admin', :id => 'add_phone'

  - if passwordable
    - password_links = []
    - if has_privilege?('update users', @user) || has_privilege?('update users', current_company)
      - if @user.crypted_password.blank?
        -# add password link
        .span-20.last#add_password
          .span-4.append-16.last.text-align-right
            %h4= link_to 'Add Password', '#', :class => 'admin', :id => 'add_password'
      - else
        - if !@primary_email_address.blank?
          -# password reset link
          - password_links.push(link_to('Reset password', password_reset_path, :class => 'admin', :id => 'manager_reset_password', :email => @primary_email_address.address))
        -# possword clear link
        - password_links.push(link_to('Clear password', password_clear_path, :class => 'admin', :id => 'clear_password'))

    .span-20.last.password#password_and_confirmation{:class => @user.crypted_password.blank? ? 'hide' : ''}
      -# password
      .span-20.last
        .span-4.text-align-right
          %h3{:style => 'font-size: 1.8em; padding-top: 15px;'}= label_tag "user_password", "Password:"
        .span-16.last
          = f.password_field :password, :class => 'text title', :style => "width: 300px;"
          - unless password_links.empty?
            %span{:style => 'padding-left: 7px; font-weight: bold;'}= password_links.join(", ")

      -# password confirmation
      .span-20.last
        .span-4.text-align-right
          %h3{:style => 'font-size: 1.3em; padding-top: 20px;'}= label_tag "user_password", "Password Again:"
        .span-16.last
          = f.password_field :password_confirmation, :class => 'text title', :style => "width: 300px;"

  %hr.space

  - if current_company.authorized_providers.include?(@user)
    .span-20.last.bottom.padding-bottom-5
      .span-4.text_field_label.text-align-right.padding-top-5
        %h3.bottom= label_tag "capacity", "Capacity:"
      .span-16.last
        = f.text_field :capacity, :style => 'width: 50px; font-size: 1.3em;'
    .span-16.prepend-4.last.hint.padding-bottom-10
      %em== Advanced: Provider's default capacity. This value is typically 1.
      %br
      %em== When scheduling free time for this provider you can set the default capacity available.
    .span-20.last
      .span-4.text_field_label.text-align-right.padding-top-5
        %h3= label_tag "preferences_provider_email_text", "Email Text:"
      .span-16.last
        = f.text_area :preferences_provider_email_text, :style => 'width: 550px; height: 100px;'
    .span-16.prepend-4.last.hint.padding-bottom-10
      %em== Text included as part of each email sent to a customer.
    .span-20.last.bottom.padding-bottom-5
      .span-4.text_field_label.text-align-right.padding-top-5
        %h3.bottom= label_tag "preferences_provider_email_daily_schedule", "Daily Schedule:"
      .span-16.last
        = f.select :preferences_provider_email_daily_schedule, yes_no_options, {:style => 'margin-top: 5px;', :class => 'select big'}
    .span-16.prepend-4.last.hint.padding-bottom-10
      %em== If 'yes', a daily schedule will be emailed to you every day.

  %hr.space

  .span-20.prepend-1.last.submit
    = submit_tag "Save Changes", :id => 'user_update_submit'
    - unless @index_path.blank?
      == or
      = link_to "Cancel", @index_path, :class => 'admin'

%hr.space

.span-15.prepend-1
  -# notes flash message
  #note_flash

  -# add new note
  .new_note#new_note_container
    %p
      %h4.bottom== Add a note:
      = render(:partial => 'notes/add_note.html.haml', :locals => {:note => @note || Note.new, :subject => @user})
  %hr.space
  -# customer notes
  #notes_collection
    = render(:partial => 'notes/notes.html.haml', :locals => {:notes => @notes})

-# sms dialog
= render(:partial => 'messages/send_message_dialog', :locals => {:sender => current_user})


