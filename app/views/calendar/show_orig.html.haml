- title(@title || "Schedule")
- stylesheet('appointments', 'calendar', 'jquery.timepickr', 'datePicker', 'jquery.autocomplete')
- javascript('appointments', 'calendar_orig', 'waitlists', 'users', 'mobile_service_providers', 'ui.timepickr', 'jquery.timepickr', 'jquery.datePicker', 'jquery.truncator')

-# calendar previous/next links
- prev_next_links = build_calendar_prev_next_links(@provider, @daterange)

.span-24.last
  .span-20.prepend-1.last.mat.padding-top-10
    .span-9
      -# schedule for provider
      %h4.bigger
        = label_tag "show_provider", "Schedule for:"
        = select_tag('show_provider', options_for_select(@providers.collect{ |o| [provider_display_name(o, current_user), "#{o.tableize}/#{o.id}"]}, "#{@provider.tableize}/#{@provider.id}"), :class => 'text')
      -# links to schedule using blocks of time or using weekly schedules
      %h4.bottom
        = link_to "Manage Weekly Schedule", show_weekly_path, :class => 'admin'
        %span.small== &nbsp;or&nbsp;
        = link_to "Add Blocks of Available Time", new_block_path, :class => 'admin'
      -#%h4
        -#= link_to "Manage Vacation Schedule", provider_vacations_path, :class => 'admin'
    .span-6.last#pdf
      %h4.bold.bottom== PDF Schedules:
      = link_to "Today, #{@today.to_s(:appt_short_month_day)}", calendar2_when_format_path(:when => 'today', :format => 'pdf'), :id => 'pdf_schedule_today', :class => 'admin'
      == &nbsp;or&nbsp;
      = link_to 'Pick a Date Range', '', :id => 'pdf_schedule_date_range', :class => 'admin'

  .span-18.prepend-1.last.padding-top-10
    = display_flash

  %hr.space

  .span-17.prepend-1.last#schedule_container{:style => 'padding-bottom: 100px;'}

    .span-17.last#schedule_help
      %h4
        == This is the schedule for
        %strong==#{@provider.name}.
        == Click a highlighted date on the calendar below to see appointments for that date,
        == or click on the '+' icon next to a date to add free time or appointments.

    .span-18.last#schedule_date_range_and_links
      .span-3
        = prev_next_links[:prev_link]
      .span-12.center_justify
        %h4.calendar.date_range_name{:style => 'white-space: nowrap;'}
          = @daterange.name(:with_dates => true)
          -# show today button if daterange does not include today
          - unless @daterange.include?(@today)
            %span{:style => 'padding-left: 5px;'}= link_to 'Today', url_for(params.update(:start_date => nil)), :class => 'admin', :style => 'font-size: 1.0em;'
      .span-3.last.right_justify
        = prev_next_links[:next_link]

    -# show calendar, with free, work, vacation, overbooked markings
    .span-18.last#free_work_calendar
      -# show add free and work appointments menu items if we have appropriate privileges
      - if has_privilege?('update calendars', @provider) || has_privilege?('update calendars', current_company)
        - add_free_link = 1
        -# now check if the provider provides any services
        - add_work_link = @services.empty? ? 0 : 1
      - else
        - add_free_link = 0
        - add_work_link = 0
      = render(:partial => 'shared/calendar', :locals => {:daterange => @daterange, :markings => @calendar_markings, :today => @today, |
                                                          :add_free_appointment_link => add_free_link, :add_work_appointment_link => add_work_link}) |

    .span-18.last#calendar_by_day.hide
      -# show days with stuff
      - @days_with_stuff.each do |day|
        .span-18.last.calendar_schedule_date{:id => "date_#{day.to_s(:appt_schedule_day)}"}
          .span-18.last.calendar.date.wide
            %span= day.to_s(:appt_day)
          -unless @capacity_and_work_by_day[day].blank?
            .span-18.last.padding-top-10
              %h4.bold== Work and Free Time
            = render(:partial => 'calendar/show_day_stuff', :locals => {:day => day, :stuff => @capacity_and_work_by_day[day]})
          -unless @free_appointments_by_day[day].blank?
            .span-18.last.padding-top-10
              %h4.bold== Schedules
            = render(:partial => 'calendar/show_day_stuff', :locals => {:day => day, :stuff => @free_appointments_by_day[day]})
          -unless @vacation_by_day[day].blank?
            .span-18.last.padding-top-10
              %h4.bold== Vacation
            = render(:partial => 'calendar/show_day_stuff', :locals => {:day => day, :stuff => @vacation_by_day[day]})
          -unless @waitlists_by_day[day].blank?
            = render(:partial => 'calendar/show_day_stuff', :locals => {:day => day, :stuff => @waitlists_by_day[day]})
          -unless @canceled_by_day[day].blank?
            .span-18.last.padding-top-10
              %h4.bold== Cancellations
            = render(:partial => 'calendar/show_day_stuff', :locals => {:day => day, :stuff => @canceled_by_day[day]})
      -# show days with no stuff
      - @daterange.each do |day|
        - next if @days_with_stuff.include?(day.in_time_zone.beginning_of_day)
        .span-18.last.calendar_schedule_date.empty{:id => "date_#{day.to_s(:appt_schedule_day)}"}
          .span-18.last.calendar.date.wide
            %span= day.to_s(:appt_day)
          .span-18.last.padding-top-10
            %h4.bold== Nothing Scheduled

-#.span-8.last
  -# schedule help
  -#.span-7.prepend-1.last
    -#= render(:partial => 'schedule_help')

-# special actions require special privileges
- if has_privilege?('update calendars', @provider) || has_privilege?('update calendars', current_company)
  -# hidden forms for add/edit appointment, add free time, and add customer
  = render(:partial => 'calendar/add_work_appointment_dialog', :locals => {:provider => @provider, :services => @services, :providers => @providers})
  = render(:partial => 'calendar/add_free_appointment_dialog', :locals => {:provider => @provider, :service => @free_service, :providers => @providers})
  - @customer = User.new
  - @customer.email_addresses.build
  - @customer.phone_numbers.build
  = render(:partial => 'users/user_form_dialog', |
           :locals => {:user => @customer, :role => 'company customer', |
                       :user_password => current_company.preferences[:customer_password], |
                       :user_email => current_company.preferences[:customer_email], |
                       :user_phone => current_company.preferences[:customer_phone], |
                       :submit_url => customer_create_format_path(:format => :json), |
                       :title => 'Add Customer', :submit_text => 'Create'}) |

-# cancel appointment dialog
= render(:partial => "calendar/cancel_appointment_dialog", :locals => {:provider => @provider})

-# pdf date range dialog
-#= render(:partial => "calendar/pdf_schedule_date_range_dialog", :locals => {:provider => @provider})

%script{:type => "text/javascript"}
  -# set the select mode used to driver services and providers in the user interface
  sp_select_mode                   = 'providers';
  var current_user                 = new Hash({"id" : "#{current_user.id}"});
  var current_provider             = new Hash({"id" : "#{@provider.id}", "type" : "#{@provider.tableize}", "name" : "#{@provider.name}"});
  var calendar_highlight_date      = "#{@calendar_highlight_date}";
  var appointment_create_work_path = "#{schedule_work_path}";
  var appointment_update_work_path = "#{appointment_path(':id')}";
  var appointment_create_free_path = "#{create_free_path}"
  var appointment_update_free_path = "#{appointment_path(':id')}";
  var appointment_cancel_path      = "#{cancel_appointment_path(':id')}";
  var appointment_show_path        = "#{appointment_path(':id')}";
  var show_weekly_path             = "#{show_weekly_path(':provider_type', ':provider_id')}";
  var check_provider_capacity_path = "#{provider_capacity_path(':provider_type', ':provider_id', ':start_time', ':duration', :format => 'json')}";

  -# build services hash
  var services = new Hash();
  - @services.each do |service|
    services.put(#{service.id}, new Hash({"duration_custom"  : #{service.allow_custom_duration ? 1 : 0}, |
                                          "duration_words"   : "#{Duration.to_words(service.duration, :prepend => 'Typically')}", |
                                          "duration_seconds" : #{service.duration}, |
                                          })) |

  -# build service providers hash
  var service_providers = new Hash();
  - @sps.keys.each do |service_id|
    var array = new Array();
    - @sps[service_id].each do |hash|
      array.push([#{hash[:id]}, "#{hash[:name]}", "#{hash[:klass]}"])
    service_providers.put(#{service_id}, array)

  -# build provider services hash
  var provider_services = new Hash();
  - @ps.keys.each do |provider_key|
    var array = new Array();
    - @ps[provider_key].each do |hash|
      array.push([#{hash[:id]}, "#{hash[:name]}"])
    provider_services.put("#{provider_key}", array)

  -# build appointments hash for free and work appointments
  var appointments  = new Hash();
  - (@capacity_and_work + @free_appointments).compact.select{ |o| o.is_a?(Appointment) }.each do |appt|
    appointments.put("#{appt.id}", new Hash({"appt_day_date_time" : "#{appt.start_at.to_s(:appt_day_date_time)}", |
                                             "appt_schedule_day"  : "#{appt.start_at.to_s(:appt_schedule_day)}", |
                                             "appt_start_time"    : "#{appt.start_at.to_s(:appt_time).downcase}", |
                                             "appt_end_time"      : "#{appt.end_at.to_s(:appt_time).downcase}", |
                                             "appt_duration"      : "#{appt.duration}", |
                                             "appt_provider"      : "#{appt.provider_type.tableize}/#{appt.provider_id}", |
                                             "appt_creator"       : "#{appt.creator.andand.name.to_s}", |
                                             "appt_service"       : "#{appt.service.andand.name.to_s}", |
                                             "appt_customer"      : "#{appt.customer.andand.name.to_s}", |
                                             "appt_customer_id"   : "#{appt.customer_id}", |
                                             "appt_mark_as"       : "#{appt.mark_as}", |
                                             "appt_recurrence"    : "#{(appt.recurrence? and !appt.recurrence_parent?) ? 1 : 0}" |
                                            })) |

  