.span-15.last.appointment{:class => [(appointment.canceled? ? 'canceled' : appointment.mark_as), cycle("", "shaded")].join(' ')}[appointment]
  .span-15.last.start_date_time.hide
    = appointment.start_at.to_s(:appt_day_date_time)
  .span-4.time
    - if appointment.work? && appointment.canceled?
      -# canceled work appointment
      %del== #{appointment.start_at.to_s(:appt_time)} - #{appointment.end_at.to_s(:appt_time)}
    - else
      %span== #{appointment.start_at.to_s(:appt_time)} - #{appointment.end_at.to_s(:appt_time)}
  .span-4
    .span-4.last.service{:class => appointment.mark_as}
      - if (appointment.work? && (has_privilege?("manage appointments", current_company) || has_privilege?("manage appointments", appointment)))
        -# work appointments can be viewed with read permissions
        = link_to appointment.service.name, appointment_path(appointment)
      - elsif (appointment.free? && (has_privilege?("manage appointments", current_company) || has_privilege?("manage appointments", appointment)))
        -# free appointments can be viewed with read permissions
        = link_to "Scheduled Availability", appointment_path(appointment)
      - else
        %h6= appointment.service.name
    - if show_location?
      .span-4.last.location
        %h6= appointment.location.andand.name
  .span-4
    .span-4.customer
      - if appointment.free?
        .span-4.last
          == #{pluralize(appointment.capacity, 'slot')} made available
        - if appointment.recur_parent
          .span-4.last
            == Part of recurring series
      - else
        %h6= appointment.customer ? appointment.customer.name : "&nbsp;"
  .span-3.last
    - if has_privilege?("update calendars", current_company)
      .span-3.last.cancel
        -# free appointments may be deleted with 'update calendars' permission
        .span-3.last.cancel-weekly
          - if appointment.recurrence_parent
            = link_to('Cancel series', url_for(:subdomain => current_subdomain, :controller => 'appointments', :action => 'destroy', :id => appointment.id, :series => 1), :class => "ujs delete confirm", :question => "Are you sure you want to cancel all future availability in this series?")
        -# You can't edit or delete a recurrence parent on its own - you will impact the entire series
        .span-3.last.cancel-one
          - if !appointment.recurrence_parent? && !appointment.canceled?
            - if appointment.free?
              = link_to('Cancel availability', cancel_appointment_path(appointment), :class => "ujs cancel confirm", :question => "Are you sure you want to cancel this availability?")
            - else
              = link_to('Cancel', cancel_appointment_path(appointment), :class => "ujs cancel confirm", :question => "Are you sure you want to cancel this appointment?")
          - elsif appointment.work? && appointment.canceled?
            -# canceled work appointment
            == Canceled