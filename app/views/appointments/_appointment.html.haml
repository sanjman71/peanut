.span-15.last.appointment.review

  - tag = appointment.canceled? ? 'del' : 'span'
  
  -# what
  .span-15.last.padding-bottom-5#what
    .span-3.label.block
      %span.block== What:
    .span-12.last.data
      ~ "<#{tag}>#{appointment.service.name}</#{tag}>"
  
  -# with
  .span-15.last.padding-bottom-5#with
    .span-3.label.block
      %span.block== With:
    .span-12.last.data
      ~ "<#{tag}>#{(appointment.provider || User.anyone).name}</#{tag}>"

  -# when
  .span-15.last.padding-bottom-5#when
    .span-3.label.block
      %span.block== When:
    .span-12.last.data
      ~ "<#{tag}>#{appointment.start_at.to_s(:appt_day_date_time)}</#{tag}>"

  -# duration
  .span-15.last.padding-bottom-5#duration
    .span-3.label.block
      %span.block== How Long:
    .span-12.last.data
      ~ "<#{tag}>#{Duration.to_words(appointment.duration)}</#{tag}>"

  -# reminders, for new appointments and for customers with email addresses
  - if appointment.new_record? and (appointment.customer.andand.email_addresses_count.to_i > 0)
    .span-15.last.padding-bottom-5#reminder
      .span-3.label.block
        %span.block== Reminder:
      .span-12.last.data
        = label_tag "reminder_on", "Yes"
        = radio_button_tag "preferences_reminder_customer", "1", true, :id => 'reminder_on'
        == &nbsp;
        = label_tag "reminder_off", "No Thanks"
        = radio_button_tag "preferences_reminder_customer", "0", false, :id => 'reminder_off'
    .span-12.prepend-3.last.padding-bottom-5
      %em.small== An email reminder will be sent 24 hours before the appointment
  - elsif !appointment.new_record?
    -# not a new record, show reminder preference value
    .span-15.last.padding-bottom-5#reminder
      .span-3.label.block
        %span.block== Reminder:
      .span-12.last.data
        = appointment.preferences[:reminder_customer].to_i == 1 ? 'On' : 'Off'

  - if appointment.recurrence?
    .span-15.last.padding-bottom-5#recurrence
      .span-3.label.block
        %span.block== Recurrence:
      .span-12.last.data
        ~ "<#{tag}>#{appointment_recur_rule_in_words(appointment.recurrence_parent)}</#{tag}>"

  - if customer_signup
    = render(:partial => 'appointment_customer_signup', :locals => {:signup => customer_signup})
  - else
    -# show customer for work and wait appointments
    - unless appointment.customer.blank?
      .span-15.last.padding-bottom-5#customer
        .span-3.label.block
          %span.block== Customer:
        .span-12.last
          %span#customer_default.data
            %span{:id => 'customer_name'}= customer_display_name(appointment.customer, current_user)
            -# the user can choose a customer for a new appointment, with the right privileges
            - if appointment.new_record? and has_privilege?('create users', current_company)
              %span{:style => 'font-size: 0.8em; color: #333333;'}== or
              %span= link_to 'Change Customer', '', :id => 'hide_customer_default', :class => 'admin'
          %span#customer_search.hide
            = label_tag "customer_search_text", "Find a customer by typing their name", :class => '', :style => 'font-weight: bold; color: #5500BB; font-size: 0.8em;'
            %br
            = text_field_tag("", "", :id => 'customer_search_text', :class => 'title', :url => customers_path)
            %br
            = link_to 'Cancel', '', :class => 'admin', :id => 'hide_customer_search'
            %span{:style => 'font-size: 0.7em;'}== or
            = link_to 'Create a New Customer', customer_new_path(:return_to => request.request_uri), :class => 'admin'
            = hidden_field_tag :customer_search_id, 0
