- appt_day_date_time  = appointment.start_at.to_s(:appt_day_date_time)
- appt_schedule_day   =  appointment.start_at.to_s(:appt_schedule_day)
- appt_start_time     = appointment.start_at.to_s(:appt_time).downcase
- appt_end_time       = appointment.end_at.to_s(:appt_time).downcase
- appt_duration       = appointment.duration.to_s
- appt_provider       = "#{appointment.provider_type.tableize}/#{appointment.provider_id}"
- appt_klasses        = [(appointment.canceled? ? 'canceled' : appointment.mark_as), cycle("", "shaded")].join(' ')

.span-15.last.appointment[appointment]{:class => appt_klasses, :appt_day_date_time => appt_day_date_time, :appt_schedule_day => appt_schedule_day, |
                                       :appt_start_time => appt_start_time, :appt_end_time => appt_end_time, |
                                       :appt_duration => appt_duration, :appt_provider => appt_provider} |
  .span-4.time
    - if appointment.canceled?
      -# canceled work appointment
      %del== #{appointment.start_at.to_s(:appt_time)} - #{appointment.end_at.to_s(:appt_time)}
    - else
      %span== #{appointment.start_at.to_s(:appt_time)} - #{appointment.end_at.to_s(:appt_time)}
  .span-4
    .span-4.last.service{:class => appointment.mark_as}
      - if (appointment.work? && (has_privilege?("manage appointments", current_company) || has_privilege?("manage appointments", appointment)))
        -# work appointments can be viewed with read permissions
        = link_to appointment.service.name, appointment_path(appointment)
      - elsif (appointment.free? && (has_privilege?("manage appointments", current_company) || has_privilege?("manage appointments", appointment)))
        -# free appointments can be viewed with read permissions
        = appointment.recurrence? ? "Recurring Availability" : "Scheduled Availability"
      - else
        %h6= appointment.service.name
    - if show_location?
      .span-4.last.location
        %h6= appointment.location.andand.name
  .span-7.last
    .span-7.last.slots_edit_cancel
      .span-4
        - if appointment.free?
          .span-4.last
            == #{pluralize(appointment.capacity, 'slot')} made available
        - else
          .span-4.last.customer[appointment.customer]
            - if appointment.customer.blank?
              == &nbsp
            - else
              .span-4.last.customer_name
                %h6= appointment.customer.name
              - if !appointment.customer.primary_phone_number.blank?
                .span-4.last.customer_phone_email
                  %h6= number_to_phone(appointment.customer.primary_phone_number.address.to_i, :area_code => true, :delimiter => " ")
      - if !(has_privilege?('update calendars', @provider) || has_privilege?('update calendars', current_company))
        .span-3.last
          == &nbsp;
      - else
        .span-3.last
          .span-3.last.editcancel
            .span-3.last.editcancel-one
              - if !appointment.recurrence_parent? && !appointment.canceled?
                = link_to('Edit', '', :id => "edit_#{appointment.mark_as}_appointment")
                |
                = link_to('Cancel', cancel_appointment_path(appointment), :class => ["cancel", "confirm", appointment.mark_as].join(" "))
              - elsif appointment.canceled?
                == Canceled
