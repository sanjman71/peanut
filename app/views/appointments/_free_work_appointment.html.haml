-# set hours for a non-canceled work appointment
- appt_hours    = (appointment.work? and !appointment.canceled?) ? "hours_%d" % (appointment.duration/3600) : "hours_0"
-# mark canceled appointments as such; otherwise use mark_as value for state
- appt_state    = appointment.canceled? ? ['canceled'] : [appointment.mark_as]
-# add schedule state for recurrences
- if appointment.recurrence?
  - appt_state.push("schedule")
- appt_klasses  = [appt_state.join(' '), appt_hours]

= render(:partial => 'calendar/show_duration', :locals => {:appt_or_slot => appointment, :state => appt_state, :size => appt_hours})

.span-15.last.appointment[appointment]{:class => appt_klasses.join(' ')} |
  .span-4.time
    - if appointment.canceled?
      -# canceled work appointment
      %del== #{appointment.start_at.to_s(:appt_time)} - #{appointment.end_at.to_s(:appt_time)}
    - else
      %span== #{appointment.start_at.to_s(:appt_time)} - #{appointment.end_at.to_s(:appt_time)}
  .span-11.last
    .span-4
      .span-4.last.service{:class => appointment.mark_as}
        - if (appointment.work? && (has_privilege?("update calendars", current_company) || has_privilege?("update calendars", appointment.provider)))
          - if appointment.canceled?
            -# canceled work appointments can't be managed
            = appointment.service.name
          - else
            -# work appointments can be edited/canceled with update calendar permissions
            = link_to appointment.service.name, '#', :id => "edit_work_appointment"
        - elsif (appointment.free? && (has_privilege?("update calendars", current_company) || has_privilege?("update calendars", appointment.provider)))
          -# free appointments can be edit/canceled with update calendar permissions
          - link_text = appointment.recurrence? ? 'Weekly Availability' : 'Scheduled Availability'
          = link_to(link_text, '#', :id => 'edit_free_appointment')
        - elsif appointment.vacation?
          %span.bold== Vacation
        - else
          %h6= appointment.service.name
      - if show_location?
        .span-4.last.location
          %h6= appointment.location.andand.name
    .span-7.last
      .span-7.last.slots_edit_cancel
        .span-4
          - if appointment.free?
            .span-4.last
              == #{pluralize(appointment.capacity, 'slot')} made available
          - else
            .span-4.last.customer[appointment.customer]
              - if appointment.customer.blank?
                == &nbsp
              - else
                .span-4.last.customer_name
                  %h6= appointment.customer.name
                - if !appointment.customer.primary_phone_number.blank?
                  .span-4.last.customer_phone_email
                    %h6= number_to_phone(appointment.customer.primary_phone_number.address.to_i, :area_code => true, :delimiter => " ")
        -# the edit/cancel links have been rolled into the 'show' link above

        -#- if !(has_privilege?('update calendars', @provider) || has_privilege?('update calendars', current_company))
          -#.span-3.last
            -#== &nbsp;
        -#- else
          -#.span-3.last
            -#.span-3.last.editcancel
              -#.span-3.last.editcancel-one
                -#- if appointment.canceled?
                  -#== Canceled
                -#- elsif appointment.vacation?
                  -# no edit, cancel link on vacation appointments
                  -#== &nbsp;
                -#- else
                  -#- if appointment.recurrence? and !appointment.recurrence_parent?
                    -# allow user to manage provider's weekly schedule path for both edit and cancel recurence actions
                    -#- edit_recurrence = show_weekly_path(appointment.provider.tableize, appointment.provider.id)
                  -#- else
                    -# its not a recurrence
                    -#- edit_recurrence = ''
                  -#= link_to('Edit', '#', :id => "edit_#{appointment.mark_as}_appointment", :edit_recurrence => edit_recurrence)
                  -#|
                  -#= link_to('Cancel', '#', :url => cancel_appointment_path(appointment), :class => ["cancel", "confirm", appointment.mark_as].join(" "), :edit_recurrence => edit_recurrence)

    -# appointment notes
    - unless appointment.notes.empty?
      .span-11.last
        .span-2
          %strong== Notes:
        .span-9.last.truncate
          %ul
            - appointment.notes.each do |n|
              %li=h(n.comment)
