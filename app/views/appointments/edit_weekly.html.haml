- title("Manage Schedules")
- stylesheet('calendar', 'jquery.timepickr')
- javascript('calendar_weekly', 'ui.timepickr', 'jquery.timepickr')

.span-24.last#what
  .span-15.prepend-1.mat.padding-top-10
    .span-15.last.provider
      - if @providers.blank?
        = label_tag "edit_provider", "Create weekly availability schedule for #{@provider.name}", :class => 'big'
      - else
        = label_tag "edit_provider", "Create weekly availability schedule for", :class => 'big'
        = select_tag('edit_provider', options_for_select(@providers.collect{ |o| [o.name, "#{o.tableize}/#{o.id}"]}, "#{@provider.tableize}/#{@provider.id}"), :class => 'text')      
    %h4.span-15.last#how{:style => 'line-height: 25px;'}
      == Use the calendar to select the days of the week.
      %br
      == Use the time range sliders to select the available time range.
      %br
      == Specify the start date and end date for the schedule.
      %br
      == Click the 'Create Weekly Schedule' button to add the selected available time to your calendar.
  .span-7.prepend-1.last
    .sidebar.instructions.padding-5
      == What is available time?
      %ul{:style => 'font-size: 11px;'}
        %li== Its the time a person is available to take appointments.
      == Why does everyone start with no available time?
      %ul{:style => 'font-size: 11px;'}
        %li== Its the default, since the system has no way of knowing when a person is available to work.

.span-14.prepend-1.last
  = display_flash
.span-14.prepend-1.last
  = error_messages_for(:appointment)

%hr.space

.span-14.prepend-1.last.prompt
  == When will the first appointment in this recurring series start and end?
.span-14.prepend-1.last.hint.padding-bottom-10
  == We assume the appointment starts and ends on the same day.
  -#== Usually the first appointment will start and end on the same day

.span-14.prepend-1.last
  .span-2.text_field_label
    = label_tag "starts_at", "Start Time:"
  .span-4.padding-top-5
    = text_field_tag 'starts_at', @appointment.start_at.andand.to_s(:appt_time).andand.downcase || '', :class => 'timepicker std_text_field_style', :autocomplete => 'off'
  .span-2.text_field_label
    = label_tag "start_date", "Date:"
  .span-4.last.padding-top-5
    = text_field_tag 'start_date', @appointment.start_at.andand.to_s(:appt_datepicker_date) || '', :class => 'datepicker std_text_field_style', :autocomplete => 'off'

.span-14.prepend-1.last
  .span-2.text_field_label
    = label_tag "ends_at", "End Time:"
  .span-4.padding-top-5
    = text_field_tag 'ends_at', @appointment.end_at.andand.to_s(:appt_time).andand.downcase || '', :class => 'timepicker std_text_field_style', :autocomplete => 'off'
  -# we assume the start and end date are the same
  -#.span-2.text_field_label
    -#= label_tag "end_date", "End Date:"
  -#.span-4.last.padding-top-5
    -#= text_field_tag 'end_date', '', :class => 'datepicker std_text_field_style', :autocomplete => 'off'

%hr.space

.span-14.prepend-1.last.prompt
  == Which days will the appointment recur on?
%h4.bottom.visible.span-14.prepend-1.append-9.last#weekly_schedule
  == &nbsp;

%hr.space

.span-14.prepend-1.last
  .span-14#free_work_calendar
    - days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
    - start_day = current_company.preferences[:start_wday].to_i
    - recur_days = appointment_recur_rule_days(@appointment)
    
    %table.calendar
      %tbody
        %tr.colborder
          - 0.upto 6 do
            - day_string = days[start_day%7]
            - start_day += 1
            %th{:class => ['dayname', recur_days.include?(day_string) ? 'mark' : nil].join(' '), :id => day_string.downcase, :byday => day_string.downcase.slice(0,2)}= day_string


%hr.space

.span-14.prepend-1.last
  .span-14.last.prompt
    == How long will this appointment recur?
  .span-14.last.hint
    == If you prefer you can leave it open ended.
  .span-4.text_field_label
    = label_tag "schedule_end_date", "Series Ends:"
  .span-10.last.padding-top-5
    = radio_button_tag "ends", "Never", @appointment.recur_until.blank? ? true : false, :id => 'schedule_end_never'
    = label_tag "schedule_end_never", "Never", :class => 'std_text_field_style'
    = radio_button_tag "ends", "Until", @appointment.recur_until.blank? ? false : true, :id => 'schedule_end_until'
    = label_tag "schedule_end_until", "Until", :class => 'std_text_field_style', :style => 'padding-right: 5px;'
    = text_field_tag 'schedule_end_date', @appointment.recur_until.andand.to_s(:appt_datepicker_date) || '', :class => 'datepicker hide std_text_field_style'
    
%hr.space
    
- if @appointment.new_record?
  - url = url_for(:subdomain => current_subdomain, :controller => 'appointments', :action => 'create_weekly', :provider_type => @provider.tableize, :provider_id => @provider.id)
  - submit_text = "Create Weekly Schedule"
  - method = :post
- else
  - url = url_for(:subdomain => current_subdomain, :controller => 'appointments', :action => 'update_weekly', :provider_type => @provider.tableize, :provider_id => @provider.id)
  - submit_text = "Update Weekly Schedule"
  - method = :put

- form_for(@appointment, :url => url, :method => method, :html => {:id => 'add_weekly_schedule_form'}) do |f|
  = hidden_field_tag :freq, 'weekly'
  = hidden_field_tag :wkst, 'su'
  = hidden_field_tag :byday, ''
  = hidden_field_tag :dstart, ''
  = hidden_field_tag :tstart, ''
  = hidden_field_tag :dend, ''
  = hidden_field_tag :tend, ''
  = hidden_field_tag :until, ''

  - if @provider.class.to_s == "Resource"
    .span-14.prepend-1.last.prompt
      == Advanced: How many #{@provider.name.downcase.pluralize} will be available:
    .span-14.prepend-1.last.hint.padding-bottom-10
      == This value is typically 1. It defaults to the capacity of the #{@provider.name} and should always be 1 or more.
  - else
    .span-14.prepend-1.last.prompt
      == Advanced: How many slots will #{@provider.name} have available during this free time?
    .span-14.prepend-1.last.hint.padding-bottom-10
      == This value is typically 1. It defaults to the provider's default number of slots and should always be 1 or more.
  .span-14.prepend-1.last
    .span-3.text_field_label
      = label_tag "capacity", "Slots:"
    .span-4.last
      = text_field_tag 'capacity', @provider.capacity, :class => 'std_text_field_style'
  
  %hr.space
  %hr.space
  
  .span-16.last.prepend-1
    %h2#submit
      = f.submit submit_text, :class => 'big button'
      %span{:style => 'font-size: 11px;'}
        == or
        = link_to 'Cancel', url_for(:controller => 'calendar', :action => 'show', :provider_type => @provider.tableize, :provider_id => @provider.id, :subdomain => current_subdomain)
    %h2.hide#progress= image_tag 'barbershop.gif'
