- title(@title)
- stylesheet('appointments')
- javascript('appointments')

.span-16
  .span-15.prepend-1.mat.padding-top-10.padding-bottom-10
    .span-10
      -# appointment providers
      %h3{:style => 'margin-bottom: 3px;'}
        = label_tag "customer", "Appointments for", :class => 'big'
        = select_tag('customer', options_for_select(@customers.collect{ |o| [customer_display_name(o, current_user), o.id]}, @customer.id), :class => 'text')

    -# appointment state links
    .span-5.last{:style => 'padding-top: 7px;'}
      #links
        - build_appointment_state_when_links(params, ['upcoming', 'completed', 'canceled'], @state, :default => 'upcoming') do |link, separator|
          = link
          = separator
      
    .span-15.last
      %h3{:style => 'font-size: 1.3em;'}== Today is #{Time.now.to_s(:appt_day)}
    
  %hr.space
  
  .span-15.prepend-1.last
    - if @appointments.blank?
      %h2.bottom{:style => 'color: #5500BB;'}== No #{@state} appointments
    - else
      %h3.bottom{:style => 'color: #5500BB;'}== #{pluralize(@appointments.size, "#{@state} appointment")}
  
  %hr.space
  
  - @appointments_by_customer.each do |customer, appointments|
    -# show customer name if showing more than 1 customer's appointments
    .span-8.prepend-1.last
      - if @anyone
        .customer.group[customer]
          == Customer:
          = customer.name
    
    -# customer appointments
    - reset_cycle
    = render(:partial => 'customer_appointments', :locals => {:customer => customer, :appointments => appointments})

    -# add space between customer appointment groups
    %hr.space
    
-# appointment help
.span-7.prepend-1.last
  = render(:partial => 'appointment_help', :locals => {:state => @state})

